{
  "name": "typeson-registry",
  "version": "7.0.0",
  "description": "The type registry for typeson",
  "author": "dfahlander",
  "contributors": [
    "Brett Zamir"
  ],
  "type": "module",
  "types": "./dist/index.d.ts",
  "main": "./dist/index.umd.min.js",
  "module": "./index.js",
  "exports": {
    ".": {
      "import": "./dist/index.min.js",
      "require": "./dist/index.umd.min.js",
      "default": "./dist/index.umd.min.js"
    },
    "./*": "./*"
  },
  "scripts": {
    "tsc": "tsc && node tools/append-to-declaration-files.js",
    "prepublishOnly": "pnpm i",
    "eslint": "eslint --ext js,md,html .",
    "lint": "npm run eslint --",
    "start": "static -p 8085",
    "rollup": "node ./build.js",
    "build": "npm run rollup && tsc -p tsconfig-build.json",
    "mocha": "mocha --require chai/register-expect.js --require chai/register-assert.js test/*.js",
    "open-coverage": "open-cli http://localhost:8085/coverage/ && npm start",
    "coverage": "rm -Rf node_modules/.cache && c8 npm run mocha",
    "test-nocov": "npm run build && npm run eslint && npm run coverage",
    "test": "npm run build && npm run eslint && npm run coverage",
    "test:worker-open": "open-cli http://localhost:8085/browser-test/worker.html && npm start",
    "test:browser-open": "open-cli http://localhost:8085/browser-test/ && npm start",
    "test:browser": "npm run build && npm run eslint && npm run test:browser-open",
    "windows": "node windows-devinstall"
  },
  "c8": {
    "reporter": [
      "text",
      "html"
    ],
    "check-coverage": true,
    "branches": 100,
    "lines": 100,
    "functions": 100,
    "statements": 100,
    "exclude": [
      "build.js",
      "dist",
      "windows-devinstall.js",
      ".ncurc.js",
      ".eslintrc.js",
      "browser-test",
      "coverage",
      "test/**",
      "node_modules/**"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dfahlander/typeson-registry.git"
  },
  "browserslist": [
    "cover 100%"
  ],
  "keywords": [
    "typeson",
    "JSON",
    "remoting",
    "universal"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dfahlander/typeson-registry/issues"
  },
  "homepage": "https://github.com/dfahlander/typeson-registry#readme",
  "engines": {
    "node": "^14.17.0 || >=16.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.21.5",
    "@babel/eslint-parser": "^7.21.3",
    "@babel/preset-env": "^7.21.5",
    "@brettz9/eslint-plugin": "^1.0.4",
    "@brettz9/node-static": "^0.1.1",
    "@rollup/plugin-babel": "^6.0.3",
    "@rollup/plugin-commonjs": "^24.1.0",
    "@rollup/plugin-node-resolve": "^15.0.2",
    "@rollup/plugin-terser": "^0.4.1",
    "@types/chai": "^4.3.5",
    "@types/jsdom": "^21.1.1",
    "@types/mocha": "^10.0.1",
    "@types/whatwg-url": "^11.0.0",
    "c8": "^7.13.0",
    "canvas": "^2.11.2",
    "chai": "^4.3.7",
    "eslint": "^8.39.0",
    "eslint-config-ash-nazg": "^34.11.1",
    "eslint-config-standard": "^17.0.0",
    "eslint-plugin-array-func": "^3.1.8",
    "eslint-plugin-chai-expect": "^3.0.0",
    "eslint-plugin-chai-friendly": "^0.7.2",
    "eslint-plugin-compat": "^4.1.4",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-html": "^7.1.0",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-jsdoc": "^43.1.1",
    "eslint-plugin-markdown": "^3.0.0",
    "eslint-plugin-n": "^15.7.0",
    "eslint-plugin-no-unsanitized": "^4.0.2",
    "eslint-plugin-no-use-extend-native": "^0.5.0",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-sonarjs": "^0.19.0",
    "eslint-plugin-standard": "^4.1.0",
    "eslint-plugin-unicorn": "^46.0.0",
    "jsdom": "^21.1.1",
    "mocha": "^10.2.0",
    "open-cli": "^7.2.0",
    "rollup": "^3.21.2",
    "socket.io": "^4.6.1",
    "socket.io-client": "^4.6.1"
  },
  "dependencies": {
    "base64-arraybuffer-es6": "^2.0.1",
    "typeson": "^9.0.1",
    "whatwg-url": "^12.0.1"
  },
  "tonicExample": "var Typeson = require('typeson');\nvar TSON = new Typeson().register(require('typeson-registry/dist/presets/builtin'));\n\nTSON.stringify({foo: new Date()}, null, 2);"
}
